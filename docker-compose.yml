version: "2"

networks:
  backend:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1

volumes:
  mariadb:
  traefik-certs-data:
  mqtt_data:
  node-red_data:

services:
  traefik:
    container_name: traefik
    image: traefik:latest
    restart: unless-stopped
    ports:
      # Public HTTP Port:
      - '80:80'
      # Public HTTPS Port:
      - '443:443'
    environment:
      - HETZNER_API_KEY=${HETZNER_API_KEY}
      - TZ=Europe/Berlin
    networks:
      - backend
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./traefik/config.yml:/etc/traefik/traefik.yml:ro"
      - "./traefik/dynamic:/etc/traefik/dynamic:ro"
      - "traefik-certs-data:/etc/traefik/certs"

  db:
    container_name: db
    image: 'mariadb:10'
    restart: unless-stopped
    networks:
      - backend
    environment:
      MARIADB_ALLOW_EMPTY_ROOT_PASSWORD: "yes"
      TZ: Europe/Berlin
    volumes:
      - "mariadb:/var/lib/mysql"

  phpmyadmin:
    container_name: phpmyadmin
    image: phpmyadmin:latest
    restart: unless-stopped
    environment:
      PMA_HOST: db
      TZ: Europe/Berlin
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pma.rule=Host(`pmw.ffw-it.de`)"
      - "traefik.http.routers.pma.entrypoints=websecure"
      - "traefik.http.routers.pma.middlewares=vpn-whitelist@file"
      - "traefik.http.routers.pma.tls=true"

  mqtt:
    container_name: mqtt
    build: ./mqtt
    restart: unless-stopped
    networks:
      - backend
    environment:
      TZ: Europe/Berlin
    ports:
      - "10.14.0.5:1884:1884"
    volumes:
      - ./mqtt-config:/mosquitto/config
      - mqtt_data:/mosquitto/data
    labels:
      - "traefik.enable=true"

      - "traefik.tcp.routers.mqtt.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.mqtt.entrypoints=mqtt"
      - "traefik.tcp.routers.mqtt.tls=true"
      - "traefik.tcp.routers.mqtt.service=mqtt"
      - "traefik.tcp.services.mqtt.loadbalancer.server.port=8883"

      - "traefik.tcp.routers.mqtt-ws.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.mqtt-ws.entrypoints=mqtt-ws"
      - "traefik.tcp.routers.mqtt-ws.tls=true"
      - "traefik.tcp.routers.mqtt-ws.service=mqtt"
      - "traefik.tcp.services.mqtt-ws.loadbalancer.server.port=8884"

  node-red:
    container_name: node-red
    image: nodered/node-red
    restart: unless-stopped
    networks:
      - backend
    environment:
      NODE_RED_ENABLE_PROJECTS: true
      TZ: Europe/Berlin
    volumes:
      - node-red_data:/data
    user: node-red
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.node-red.rule=Host(`flow.ffw-it.de`)"
      - "traefik.http.routers.node-red.entrypoints=websecure"
      - "traefik.http.routers.node-red.middlewares=vpn-whitelist@file"
      - "traefik.http.routers.node-red.tls=true"
      - "traefik.http.services.node-red.loadbalancer.server.port=1880"

######### Not in use yet
#  web-public:
#    container_name: web-public
#    build: ./webserver-public
#    restart: unless-stopped
#    networks:
#      - backend
#    environment:
#      TZ: Europe/Berlin
#    volumes:
#      - "/opt/www-public:/var/www/html/"
#    depends_on:
#      - db